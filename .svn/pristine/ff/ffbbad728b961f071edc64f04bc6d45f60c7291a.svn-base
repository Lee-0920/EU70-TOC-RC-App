/*
 * DS3904Driver.c
 *
 *  Created on: 2018年11月19日
 *      Author: Administrator
 */
#include <OpticalDriver/DS3904Driver.h>
#include "stm32f4xx.h"
#include "Tracer/Trace.h"

//********DS3904命令码定义*********
#define DS3904_TCON_CONNECT_ALL 0x1FF

#define DS3904_WRITE_TCONRegister 		0x40	  //TCON寄存器地址0x04<<4 | 写命令码0x00

#define DS3904_READ_TCONRegister 		0x4C	  //TCON寄存器地址0x04<<4 | 读命令码0x0C

#define DS3904_WRITE_WIPER0 	0x00      //最低位用于存放D8的值  内存地址0x00<<4 | 写命令码0x00

#define DS3904_WRITE_WIPER1 	0x10	  //最低位用于存放D8的值	内存地址0x01<<4 | 写命令码0x00


void DS3904_SCLHigh(DS3904Driver* DS3904)
{
    GPIO_SetBits(DS3904->portSCL, DS3904->pinSCL);
}

void DS3904_SCLLow(DS3904Driver* DS3904)
{
    GPIO_ResetBits(DS3904->portSCL, DS3904->pinSCL);
}

void DS3904_SDAHigh(DS3904Driver* DS3904)
{
    GPIO_SetBits(DS3904->portSDA, DS3904->pinSDA);
}

void DS3904_SDALow(DS3904Driver* DS3904)
{
    GPIO_ResetBits(DS3904->portSDA, DS3904->pinSDA);
}

Uint8 DS3904_SDARead(DS3904Driver* DS3904)
{
    return GPIO_ReadInputDataBit(DS3904->portSDA, DS3904->pinSDA);
}

void DS3904_SDAIn(DS3904Driver* DS3904)
{
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Pin = DS3904->pinSDA;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(DS3904->portSDA, &GPIO_InitStructure);
}

void DS3904_SDAOut(DS3904Driver* DS3904)
{
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Pin = DS3904->pinSDA;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(DS3904->portSDA, &GPIO_InitStructure);
}


void DS3904_Start(DS3904Driver* DS3904)
{
    DS3904_SDAOut(DS3904);

    //SCL、SDA拉高
    DS3904_SDAHigh(DS3904);
    DS3904_SCLHigh(DS3904);
    System_DelayUs(7);

    //SDA拉低
    DS3904_SDALow(DS3904);
    System_DelayUs(7);

    //SCL拉低
    DS3904_SCLLow(DS3904);
}

void DS3904_Stop(DS3904Driver* DS3904)
{
    DS3904_SDAOut(DS3904);

    //SCL、SDA拉低
    DS3904_SCLLow(DS3904);
    DS3904_SDALow(DS3904);
    System_DelayUs(7);

    //SCL、SDA拉高
    DS3904_SCLHigh(DS3904);
    System_DelayUs(7);
    DS3904_SDAHigh(DS3904);
}

Bool DS3904_WaitAck(DS3904Driver* DS3904)
{
    Uint16 errTimes = 0;

    DS3904_SDAIn(DS3904);

    DS3904_SDAHigh(DS3904);
    System_DelayUs(2);
    DS3904_SCLHigh(DS3904);
    System_DelayUs(2);

    while(DS3904_SDARead(DS3904))
    {
        errTimes++;
        if(errTimes>=400)
        {
            DS3904_Stop(DS3904);
            return FALSE;  //接收应答失败
        }
    }

    DS3904_SCLLow(DS3904);
    return TRUE;   //接收应答成功
}

void DS3904_SendAck(DS3904Driver* DS3904)
{
    DS3904_SCLLow(DS3904);

    DS3904_SDAOut(DS3904);

    DS3904_SDALow(DS3904);
    System_DelayUs(2);
    DS3904_SCLHigh(DS3904);
    System_DelayUs(7);
    DS3904_SCLLow(DS3904);
}

void DS3904_SendNoAck(DS3904Driver* DS3904)
{
    DS3904_SCLLow(DS3904);

    DS3904_SDAOut(DS3904);

    DS3904_SDAHigh(DS3904);
    System_DelayUs(2);
    DS3904_SCLHigh(DS3904);
    System_DelayUs(7);
    DS3904_SCLLow(DS3904);
}
Bool DS3904_Reset(DS3904Driver* DS3904)
{
//	Uint16 byte = DS3904_RESET;
	Uint8 i;

	DS3904_Start(DS3904);

	DS3904_SDAOut(DS3904);
	DS3904_SCLLow(DS3904);
	System_DelayUs(1);
	for(i = 0; i < 9; i++)
	{
		DS3904_SDAHigh(DS3904);
//        TRACE_INFO("\n 1");

		System_DelayUs(2);

		DS3904_SCLHigh(DS3904);
		System_DelayUs(7);

		DS3904_SCLLow(DS3904);
		System_DelayUs(6);
	}
	if(DS3904_WaitAck(DS3904))
	{
		TRACE_ERROR("\n reset fail :ack");
		return FALSE;
	}

	DS3904_Start(DS3904);
	DS3904_Stop(DS3904);
	TRACE_INFO("\n [reset success]");

	return TRUE;


}

void DS3904_SendByte(DS3904Driver* DS3904, Uint8 byte)
{
    Uint8 i;
    DS3904_SDAOut(DS3904);

    DS3904_SCLLow(DS3904);
    System_DelayUs(1);
    for(i = 0; i < 8; i++)
    {
        if (byte & 0x80)
        {
            DS3904_SDAHigh(DS3904);
        }
        else
        {
            DS3904_SDALow(DS3904);
        }
        byte <<= 1;
        System_DelayUs(2);

        DS3904_SCLHigh(DS3904);
        System_DelayUs(7);

        DS3904_SCLLow(DS3904);
        System_DelayUs(6);
    }
}

Uint8 DS3904_ReadByte(DS3904Driver* DS3904)
{
    Uint8 i,receive = 0;
    DS3904_SDAIn(DS3904);

    for(i = 0; i < 8; i++)
    {
        DS3904_SCLLow(DS3904);
        System_DelayUs(4);
        DS3904_SCLHigh(DS3904);

        receive<<=1;
        if(DS3904_SDARead(DS3904))
        {
            receive++;
        }
        System_DelayUs(2);
    }

    return receive;
}

void DS3904_Init(DS3904Driver* DS3904)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    RCC_AHB1PeriphClockCmd(DS3904->rccSCL | DS3904->rccSDA, ENABLE);

    GPIO_InitStructure.GPIO_Pin = DS3904->pinSCL;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(DS3904->portSCL, &GPIO_InitStructure);
    DS3904_SCLHigh(DS3904);

    GPIO_InitStructure.GPIO_Pin = DS3904->pinSDA;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(DS3904->portSDA, &GPIO_InitStructure);
    DS3904_SDAHigh(DS3904);
}

Bool DS3904_WriteOnce(DS3904Driver* DS3904, Uint8 addr, Uint16 word)
{
	Uint8 addr_wirte = addr<<1;
    Uint8 msb =(Uint8)(word&0x7F);
    Uint8 mid = 0xF8;

    TRACE_INFO("\n addr:%x, write cmd:%x, value: %d", addr, addr_wirte, word);

    if(DS3904_MAX_VALUE < word)
    {
    	TRACE_ERROR("\n DS3904 set max as 0x7F");
    	msb |= DS3904_MAX_VALUE;
    }

    DS3904_Start(DS3904);
    DS3904_SendByte(DS3904, addr_wirte);
    if(!DS3904_WaitAck(DS3904))
    {
        TRACE_ERROR("\n DS3904 write word send addr fail : nack");
        return FALSE;
    }
    DS3904_SendByte(DS3904, mid);
	if(!DS3904_WaitAck(DS3904))
	{
		TRACE_ERROR("\n DS3904 write word mid:%X fail : nack", mid);
		return FALSE;
	}
    DS3904_SendByte(DS3904, msb);
    if(!DS3904_WaitAck(DS3904))
    {
        TRACE_ERROR("\n DS3904 write word msb:%X fail : nack", msb);
        return FALSE;
    }

    DS3904_Stop(DS3904);


    return TRUE;
}

Uint16 DS3904_ReadOnce(DS3904Driver* DS3904, Uint8 addr)
{
	Uint8 addrWrite = (addr<<1);
    Uint8 addrRead = (addr<<1)+1;
    Uint8 readCmd = 0;
    Uint16 readValue = 0;
    Uint8 mid = 0xF8;
    TRACE_INFO("\n DS3904 addr:%x\n", addr);

    DS3904_Start(DS3904);
    DS3904_SendByte(DS3904, addrWrite); //写设备地址
    if(!DS3904_WaitAck(DS3904))
    {
        TRACE_ERROR("\n DS3904 read word send addr fail : nack");
        return readValue;
    }
    DS3904_SendByte(DS3904, mid); //写寄存器地址
	if(!DS3904_WaitAck(DS3904))
	{
		TRACE_ERROR("\n DS3904 read word send mid fail : nack");
		return readValue;
	}

	DS3904_Start(DS3904);	//重新发起开始信号
	DS3904_SendByte(DS3904, addrRead); //读设备地址
	if(!DS3904_WaitAck(DS3904))
	{
		TRACE_ERROR("\n DS3904 read word send addr fail : nack");
		return readValue;
	}
    readValue = DS3904_ReadByte(DS3904);  //读上一次写寄存器地址数据
//    DS3904_SendAck(DS3904);  //发送应答ACK
//    readValue<<=8;
//    readValue +=  DS3904_ReadByte(DS3904);
    DS3904_SendNoAck(DS3904);  //发送NACK

    DS3904_Stop(DS3904);

    return readValue;
}


Bool DS3904_WriteRDAC(DS3904Driver* DS3904, Uint8 addr, Uint16 value)
{
	TRACE_INFO("\n addr %d value %d ", addr,value);
	if(DS3904_WriteOnce(DS3904, addr, value))
	{
		TRACE_INFO("\n DS3904 write success");
		return TRUE;
	}

	TRACE_INFO("\n DS3904 write rdac fail");
	return FALSE;
}

Uint16 DS3904_ReadRDAC(DS3904Driver* DS3904, Uint8 addr)
{
    Uint16 result = 0;

    result = DS3904_ReadOnce(DS3904, addr);

    TRACE_INFO("\n DS3904 read: %d", result);
    return result;
}


